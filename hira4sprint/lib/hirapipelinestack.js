"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Hirapipelinestack = void 0;
const aws_cdk_lib_1 = require("aws-cdk-lib");
const cdk = require("aws-cdk-lib");
const aws_codepipeline_actions_1 = require("aws-cdk-lib/aws-codepipeline-actions");
const hirastagestack_1 = require("./hirastagestack");
const pipelines_1 = require("aws-cdk-lib/pipelines");
// const {Hirastagestack}=require('./hirastagestack')
const app = new cdk.App();
class Hirapipelinestack extends aws_cdk_lib_1.Stack {
    constructor(scope, id, props) {
        super(scope, id, props);
        const pipeline = new aws_cdk_lib_1.pipelines.CodePipeline(this, 'Pipeline', {
            synth: new aws_cdk_lib_1.pipelines.ShellStep('Synth', {
                //^ Using Secrets Manager to provide the access token to authenticate to GitHub
                input: aws_cdk_lib_1.pipelines.CodePipelineSource.gitHub('hiraaziz2022skipq/sprint3Voyager', "main", {
                    authentication: cdk.SecretValue.secretsManager('webtken'),
                    trigger: aws_codepipeline_actions_1.GitHubTrigger.POLL,
                }),
                commands: [
                    "cd hira4sprint", "npm ci", "npx cdk synth"
                ],
                primaryOutputDirectory: "hira4sprint/cdk.out"
            })
        });
        const unit_test = new pipelines_1.ShellStep("Unit_Test", {
            commands: ["cd hira4sprint", "npm ci", "npm run test"]
        });
        const stagebeta = new hirastagestack_1.Hirastagestack(this, "betastage");
        pipeline.addStage(stagebeta, { pre: [unit_test] });
        const prod = new hirastagestack_1.Hirastagestack(this, "prod");
        pipeline.addStage(prod, { pre: [new pipelines_1.ManualApprovalStep("Waiting for your approval")] });
    }
}
exports.Hirapipelinestack = Hirapipelinestack;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGlyYXBpcGVsaW5lc3RhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJoaXJhcGlwZWxpbmVzdGFjay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSw2Q0FBbUY7QUFJbkYsbUNBQW1DO0FBQ25DLG1GQUFxRTtBQUNyRSxxREFBK0M7QUFDL0MscURBQXNFO0FBQ3RFLHFEQUFxRDtBQUNyRCxNQUFNLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQztBQUUxQixNQUFhLGlCQUFrQixTQUFRLG1CQUFLO0lBQ3hDLFlBQVksS0FBZ0IsRUFBRSxFQUFVLEVBQUUsS0FBa0I7UUFDMUQsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFFeEIsTUFBTSxRQUFRLEdBQUcsSUFBSSx1QkFBUyxDQUFDLFlBQVksQ0FBQyxJQUFJLEVBQUUsVUFBVSxFQUFFO1lBQzVELEtBQUssRUFBRSxJQUFJLHVCQUFTLENBQUMsU0FBUyxDQUFDLE9BQU8sRUFBRTtnQkFDMUMsK0VBQStFO2dCQUMzRSxLQUFLLEVBQUUsdUJBQVMsQ0FBQyxrQkFBa0IsQ0FBQyxNQUFNLENBQUMsa0NBQWtDLEVBQUUsTUFBTSxFQUFDO29CQUNwRixjQUFjLEVBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxjQUFjLENBQUMsU0FBUyxDQUFDO29CQUN4RCxPQUFPLEVBQUMsd0NBQWEsQ0FBQyxJQUFJO2lCQUFFLENBQUM7Z0JBQzlCLFFBQVEsRUFBRTtvQkFDVCxnQkFBZ0IsRUFBQyxRQUFRLEVBQUMsZUFBZTtpQkFDMUM7Z0JBQ0gsc0JBQXNCLEVBQUcscUJBQXFCO2FBQzdDLENBQUM7U0FDRCxDQUFDLENBQUM7UUFFSCxNQUFNLFNBQVMsR0FBRSxJQUFJLHFCQUFTLENBQUMsV0FBVyxFQUFDO1lBQ3pDLFFBQVEsRUFBQyxDQUFDLGdCQUFnQixFQUFDLFFBQVEsRUFBQyxjQUFjLENBQUM7U0FDcEQsQ0FBQyxDQUFBO1FBSUosTUFBTSxTQUFTLEdBQUcsSUFBSSwrQkFBYyxDQUFDLElBQUksRUFBQyxXQUFXLENBQUMsQ0FBQTtRQUN0RCxRQUFRLENBQUMsUUFBUSxDQUFDLFNBQVMsRUFBQyxFQUFDLEdBQUcsRUFBQyxDQUFDLFNBQVMsQ0FBQyxFQUFDLENBQUMsQ0FBQTtRQUU5QyxNQUFNLElBQUksR0FBQyxJQUFJLCtCQUFjLENBQUMsSUFBSSxFQUFDLE1BQU0sQ0FBQyxDQUFBO1FBQzFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFDLEVBQUMsR0FBRyxFQUFDLENBQUMsSUFBSSw4QkFBa0IsQ0FBQywyQkFBMkIsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFBO0lBQ3JGLENBQUM7Q0FtQkE7QUEvQ0wsOENBK0NLIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRHVyYXRpb24sIHBpcGVsaW5lcywgUmVtb3ZhbFBvbGljeSwgU3RhY2ssIFN0YWNrUHJvcHN9IGZyb20gJ2F3cy1jZGstbGliJztcclxuaW1wb3J0ICogYXMgbGFtYmRhIGZyb20gJ2F3cy1jZGstbGliL2F3cy1sYW1iZGEnO1xyXG5pbXBvcnQgeyBDb25zdHJ1Y3QgfSBmcm9tICdjb25zdHJ1Y3RzJztcclxuaW1wb3J0IHsgTWFuYWdlZFBvbGljeSwgUm9sZSwgU2VydmljZVByaW5jaXBhbCB9IGZyb20gJ2F3cy1jZGstbGliL2F3cy1pYW0nO1xyXG5pbXBvcnQgKiBhcyBjZGsgZnJvbSAnYXdzLWNkay1saWInO1xyXG5pbXBvcnQgeyBHaXRIdWJUcmlnZ2VyIH0gZnJvbSAnYXdzLWNkay1saWIvYXdzLWNvZGVwaXBlbGluZS1hY3Rpb25zJztcclxuaW1wb3J0IHtIaXJhc3RhZ2VzdGFja30gZnJvbSAnLi9oaXJhc3RhZ2VzdGFjaydcclxuaW1wb3J0IHsgTWFudWFsQXBwcm92YWxTdGVwLCBTaGVsbFN0ZXAgfSBmcm9tICdhd3MtY2RrLWxpYi9waXBlbGluZXMnO1xyXG4vLyBjb25zdCB7SGlyYXN0YWdlc3RhY2t9PXJlcXVpcmUoJy4vaGlyYXN0YWdlc3RhY2snKVxyXG5jb25zdCBhcHAgPSBuZXcgY2RrLkFwcCgpO1xyXG5cclxuZXhwb3J0IGNsYXNzIEhpcmFwaXBlbGluZXN0YWNrIGV4dGVuZHMgU3RhY2sge1xyXG4gICAgY29uc3RydWN0b3Ioc2NvcGU6IENvbnN0cnVjdCwgaWQ6IHN0cmluZywgcHJvcHM/OiBTdGFja1Byb3BzKSB7XHJcbiAgICAgIHN1cGVyKHNjb3BlLCBpZCwgcHJvcHMpO1xyXG5cclxuICAgICAgY29uc3QgcGlwZWxpbmUgPSBuZXcgcGlwZWxpbmVzLkNvZGVQaXBlbGluZSh0aGlzLCAnUGlwZWxpbmUnLCB7XHJcbiAgICAgICAgc3ludGg6IG5ldyBwaXBlbGluZXMuU2hlbGxTdGVwKCdTeW50aCcsIHtcclxuICAgICAgLy9eIFVzaW5nIFNlY3JldHMgTWFuYWdlciB0byBwcm92aWRlIHRoZSBhY2Nlc3MgdG9rZW4gdG8gYXV0aGVudGljYXRlIHRvIEdpdEh1YlxyXG4gICAgICAgICAgaW5wdXQ6IHBpcGVsaW5lcy5Db2RlUGlwZWxpbmVTb3VyY2UuZ2l0SHViKCdoaXJhYXppejIwMjJza2lwcS9zcHJpbnQzVm95YWdlcicsIFwibWFpblwiLHtcclxuICAgICAgICAgICAgYXV0aGVudGljYXRpb246Y2RrLlNlY3JldFZhbHVlLnNlY3JldHNNYW5hZ2VyKCd3ZWJ0a2VuJyksXHJcbiAgICAgICAgICAgIHRyaWdnZXI6R2l0SHViVHJpZ2dlci5QT0xMLH0pLFxyXG4gICAgICAgICAgIGNvbW1hbmRzOiBbXHJcbiAgICAgICAgICAgIFwiY2QgaGlyYTRzcHJpbnRcIixcIm5wbSBjaVwiLFwibnB4IGNkayBzeW50aFwiXHJcbiAgICAgICAgICBdLFxyXG4gICAgICAgIHByaW1hcnlPdXRwdXREaXJlY3RvcnkgOiBcImhpcmE0c3ByaW50L2Nkay5vdXRcIlxyXG4gICAgICAgIH0pXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGNvbnN0IHVuaXRfdGVzdD0gbmV3IFNoZWxsU3RlcChcIlVuaXRfVGVzdFwiLHtcclxuICAgICAgICAgIGNvbW1hbmRzOltcImNkIGhpcmE0c3ByaW50XCIsXCJucG0gY2lcIixcIm5wbSBydW4gdGVzdFwiXVxyXG4gICAgICAgIH0pXHJcblxyXG5cclxuICAgICAgXHJcbiAgICAgIGNvbnN0IHN0YWdlYmV0YSA9IG5ldyBIaXJhc3RhZ2VzdGFjayh0aGlzLFwiYmV0YXN0YWdlXCIpXHJcbiAgICAgIHBpcGVsaW5lLmFkZFN0YWdlKHN0YWdlYmV0YSx7cHJlOlt1bml0X3Rlc3RdfSlcclxuXHJcbiAgICAgIGNvbnN0IHByb2Q9bmV3IEhpcmFzdGFnZXN0YWNrKHRoaXMsXCJwcm9kXCIpXHJcbiAgICAgIHBpcGVsaW5lLmFkZFN0YWdlKHByb2Qse3ByZTpbbmV3IE1hbnVhbEFwcHJvdmFsU3RlcChcIldhaXRpbmcgZm9yIHlvdXIgYXBwcm92YWxcIildfSlcclxuICAgIH1cclxuICBcclxuXHJcblxyXG4gICAgLy8gY3JlYXRlX3JvbGUoKTphbnl7XHJcbiAgICAvLyAgICAgY29uc3Qgcm9sZSA9IG5ldyBSb2xlKHRoaXMsICdleGFtcGxlLWlhbS1yb2xlJywge1xyXG4gICAgLy8gICAgICAgYXNzdW1lZEJ5OiBuZXcgU2VydmljZVByaW5jaXBhbCgnbGFtYmRhLmFtYXpvbmF3cy5jb20nKSxcclxuICAgIC8vICAgICAgIGRlc2NyaXB0aW9uOiAnQW4gZXhhbXBsZSBJQU0gcm9sZSBpbiBBV1MgQ0RLJyxcclxuICAgIC8vICAgICAgIG1hbmFnZWRQb2xpY2llczogW1xyXG4gICAgLy8gICAgICAgICBNYW5hZ2VkUG9saWN5LmZyb21Bd3NNYW5hZ2VkUG9saWN5TmFtZSgnQ2xvdWRXYXRjaEZ1bGxBY2Nlc3MnKSxcclxuICAgIC8vICAgICAgICAgTWFuYWdlZFBvbGljeS5mcm9tQXdzTWFuYWdlZFBvbGljeU5hbWUoJ0FtYXpvbkR5bmFtb0RCRnVsbEFjY2VzcycpLFxyXG4gICAgLy8gICAgICAgICBNYW5hZ2VkUG9saWN5LmZyb21Bd3NNYW5hZ2VkUG9saWN5TmFtZSgnc2VydmljZS1yb2xlL0FXU0xhbWJkYUJhc2ljRXhlY3V0aW9uUm9sZScpLFxyXG4gICAgLy8gICAgICAgICBNYW5hZ2VkUG9saWN5LmZyb21Bd3NNYW5hZ2VkUG9saWN5TmFtZShcIkFXU0NvZGVQaXBlbGluZV9GdWxsQWNjZXNzXCIpLFxyXG4gICAgLy8gICAgICAgICBNYW5hZ2VkUG9saWN5LmZyb21Bd3NNYW5hZ2VkUG9saWN5TmFtZShcIkFtYXpvblMzRnVsbEFjY2Vzc1wiKSxcclxuICAgIC8vICAgICAgICAgTWFuYWdlZFBvbGljeS5mcm9tQXdzTWFuYWdlZFBvbGljeU5hbWUoXCJBd3NDbG91ZEZvcm1hdGlvbkZ1bGxBY2Nlc3NcIiksXHJcbiAgICAvLyAgICAgICBdLFxyXG4gICAgLy8gICAgIH0pO1xyXG4gICAgLy8gICAgIHJldHVybiByb2xlXHJcbiAgICAvLyAgIH1cclxuICAgIH1cclxuIl19