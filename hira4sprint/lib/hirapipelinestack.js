"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Hirapipelinestack = void 0;
const aws_cdk_lib_1 = require("aws-cdk-lib");
const cdk = require("aws-cdk-lib");
const aws_codepipeline_actions_1 = require("aws-cdk-lib/aws-codepipeline-actions");
// import {Hirastagestack} from './hirastagestack'
const { Hirastagestack } = require('./hirastagestack');
const app = new cdk.App();
class Hirapipelinestack extends aws_cdk_lib_1.Stack {
    constructor(scope, id, props) {
        super(scope, id, props);
        const pipeline = new aws_cdk_lib_1.pipelines.CodePipeline(this, 'Pipeline', {
            synth: new aws_cdk_lib_1.pipelines.ShellStep('Synth', {
                //^ Using Secrets Manager to provide the access token to authenticate to GitHub
                input: aws_cdk_lib_1.pipelines.CodePipelineSource.gitHub('hiraaziz2022skipq/sprint3Voyager', "main", {
                    authentication: cdk.SecretValue.secretsManager('webtken'),
                    trigger: aws_codepipeline_actions_1.GitHubTrigger.POLL,
                }),
                commands: [
                    "cd hira4sprint", "npm ci", "npx cdk synth"
                ],
                primaryOutputDirectory: "hira4sprint/cdk.out"
            })
        });
        const stagebeta = new Hirastagestack(this, "betastage");
        pipeline.addStage(stagebeta);
        // var prod=new Hirastagestack(this,"prod")
        // pipeline.addStage.arguments(prod)
    }
}
exports.Hirapipelinestack = Hirapipelinestack;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGlyYXBpcGVsaW5lc3RhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJoaXJhcGlwZWxpbmVzdGFjay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSw2Q0FBbUY7QUFJbkYsbUNBQW1DO0FBQ25DLG1GQUFxRTtBQUNyRSxrREFBa0Q7QUFDbEQsTUFBTSxFQUFDLGNBQWMsRUFBQyxHQUFDLE9BQU8sQ0FBQyxrQkFBa0IsQ0FBQyxDQUFBO0FBQ2xELE1BQU0sR0FBRyxHQUFHLElBQUksR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDO0FBRTFCLE1BQWEsaUJBQWtCLFNBQVEsbUJBQUs7SUFDeEMsWUFBWSxLQUFnQixFQUFFLEVBQVUsRUFBRSxLQUFrQjtRQUMxRCxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUV4QixNQUFNLFFBQVEsR0FBRyxJQUFJLHVCQUFTLENBQUMsWUFBWSxDQUFDLElBQUksRUFBRSxVQUFVLEVBQUU7WUFDNUQsS0FBSyxFQUFFLElBQUksdUJBQVMsQ0FBQyxTQUFTLENBQUMsT0FBTyxFQUFFO2dCQUMxQywrRUFBK0U7Z0JBQzNFLEtBQUssRUFBRSx1QkFBUyxDQUFDLGtCQUFrQixDQUFDLE1BQU0sQ0FBQyxrQ0FBa0MsRUFBRSxNQUFNLEVBQUM7b0JBQ3BGLGNBQWMsRUFBQyxHQUFHLENBQUMsV0FBVyxDQUFDLGNBQWMsQ0FBQyxTQUFTLENBQUM7b0JBQ3hELE9BQU8sRUFBQyx3Q0FBYSxDQUFDLElBQUk7aUJBQUUsQ0FBQztnQkFDOUIsUUFBUSxFQUFFO29CQUNULGdCQUFnQixFQUFDLFFBQVEsRUFBQyxlQUFlO2lCQUMxQztnQkFDSCxzQkFBc0IsRUFBRyxxQkFBcUI7YUFDN0MsQ0FBQztTQUNELENBQUMsQ0FBQztRQU1MLE1BQU0sU0FBUyxHQUFHLElBQUksY0FBYyxDQUFDLElBQUksRUFBQyxXQUFXLENBQUMsQ0FBQTtRQUN0RCxRQUFRLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxDQUFBO1FBRTVCLDJDQUEyQztRQUMzQyxvQ0FBb0M7SUFDdEMsQ0FBQztDQW1CQTtBQTdDTCw4Q0E2Q0siLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEdXJhdGlvbiwgcGlwZWxpbmVzLCBSZW1vdmFsUG9saWN5LCBTdGFjaywgU3RhY2tQcm9wc30gZnJvbSAnYXdzLWNkay1saWInO1xyXG5pbXBvcnQgKiBhcyBsYW1iZGEgZnJvbSAnYXdzLWNkay1saWIvYXdzLWxhbWJkYSc7XHJcbmltcG9ydCB7IENvbnN0cnVjdCB9IGZyb20gJ2NvbnN0cnVjdHMnO1xyXG5pbXBvcnQgeyBNYW5hZ2VkUG9saWN5LCBSb2xlLCBTZXJ2aWNlUHJpbmNpcGFsIH0gZnJvbSAnYXdzLWNkay1saWIvYXdzLWlhbSc7XHJcbmltcG9ydCAqIGFzIGNkayBmcm9tICdhd3MtY2RrLWxpYic7XHJcbmltcG9ydCB7IEdpdEh1YlRyaWdnZXIgfSBmcm9tICdhd3MtY2RrLWxpYi9hd3MtY29kZXBpcGVsaW5lLWFjdGlvbnMnO1xyXG4vLyBpbXBvcnQge0hpcmFzdGFnZXN0YWNrfSBmcm9tICcuL2hpcmFzdGFnZXN0YWNrJ1xyXG5jb25zdCB7SGlyYXN0YWdlc3RhY2t9PXJlcXVpcmUoJy4vaGlyYXN0YWdlc3RhY2snKVxyXG5jb25zdCBhcHAgPSBuZXcgY2RrLkFwcCgpO1xyXG5cclxuZXhwb3J0IGNsYXNzIEhpcmFwaXBlbGluZXN0YWNrIGV4dGVuZHMgU3RhY2sge1xyXG4gICAgY29uc3RydWN0b3Ioc2NvcGU6IENvbnN0cnVjdCwgaWQ6IHN0cmluZywgcHJvcHM/OiBTdGFja1Byb3BzKSB7XHJcbiAgICAgIHN1cGVyKHNjb3BlLCBpZCwgcHJvcHMpO1xyXG5cclxuICAgICAgY29uc3QgcGlwZWxpbmUgPSBuZXcgcGlwZWxpbmVzLkNvZGVQaXBlbGluZSh0aGlzLCAnUGlwZWxpbmUnLCB7XHJcbiAgICAgICAgc3ludGg6IG5ldyBwaXBlbGluZXMuU2hlbGxTdGVwKCdTeW50aCcsIHtcclxuICAgICAgLy9eIFVzaW5nIFNlY3JldHMgTWFuYWdlciB0byBwcm92aWRlIHRoZSBhY2Nlc3MgdG9rZW4gdG8gYXV0aGVudGljYXRlIHRvIEdpdEh1YlxyXG4gICAgICAgICAgaW5wdXQ6IHBpcGVsaW5lcy5Db2RlUGlwZWxpbmVTb3VyY2UuZ2l0SHViKCdoaXJhYXppejIwMjJza2lwcS9zcHJpbnQzVm95YWdlcicsIFwibWFpblwiLHtcclxuICAgICAgICAgICAgYXV0aGVudGljYXRpb246Y2RrLlNlY3JldFZhbHVlLnNlY3JldHNNYW5hZ2VyKCd3ZWJ0a2VuJyksXHJcbiAgICAgICAgICAgIHRyaWdnZXI6R2l0SHViVHJpZ2dlci5QT0xMLH0pLFxyXG4gICAgICAgICAgIGNvbW1hbmRzOiBbXHJcbiAgICAgICAgICAgIFwiY2QgaGlyYTRzcHJpbnRcIixcIm5wbSBjaVwiLFwibnB4IGNkayBzeW50aFwiXHJcbiAgICAgICAgICBdLFxyXG4gICAgICAgIHByaW1hcnlPdXRwdXREaXJlY3RvcnkgOiBcImhpcmE0c3ByaW50L2Nkay5vdXRcIlxyXG4gICAgICAgIH0pXHJcbiAgICAgICAgfSk7XHJcblxyXG5cclxuXHJcblxyXG4gICAgICBcclxuICAgICAgY29uc3Qgc3RhZ2ViZXRhID0gbmV3IEhpcmFzdGFnZXN0YWNrKHRoaXMsXCJiZXRhc3RhZ2VcIilcclxuICAgICAgcGlwZWxpbmUuYWRkU3RhZ2Uoc3RhZ2ViZXRhKVxyXG5cclxuICAgICAgLy8gdmFyIHByb2Q9bmV3IEhpcmFzdGFnZXN0YWNrKHRoaXMsXCJwcm9kXCIpXHJcbiAgICAgIC8vIHBpcGVsaW5lLmFkZFN0YWdlLmFyZ3VtZW50cyhwcm9kKVxyXG4gICAgfVxyXG4gIFxyXG5cclxuXHJcbiAgICAvLyBjcmVhdGVfcm9sZSgpOmFueXtcclxuICAgIC8vICAgICBjb25zdCByb2xlID0gbmV3IFJvbGUodGhpcywgJ2V4YW1wbGUtaWFtLXJvbGUnLCB7XHJcbiAgICAvLyAgICAgICBhc3N1bWVkQnk6IG5ldyBTZXJ2aWNlUHJpbmNpcGFsKCdsYW1iZGEuYW1hem9uYXdzLmNvbScpLFxyXG4gICAgLy8gICAgICAgZGVzY3JpcHRpb246ICdBbiBleGFtcGxlIElBTSByb2xlIGluIEFXUyBDREsnLFxyXG4gICAgLy8gICAgICAgbWFuYWdlZFBvbGljaWVzOiBbXHJcbiAgICAvLyAgICAgICAgIE1hbmFnZWRQb2xpY3kuZnJvbUF3c01hbmFnZWRQb2xpY3lOYW1lKCdDbG91ZFdhdGNoRnVsbEFjY2VzcycpLFxyXG4gICAgLy8gICAgICAgICBNYW5hZ2VkUG9saWN5LmZyb21Bd3NNYW5hZ2VkUG9saWN5TmFtZSgnQW1hem9uRHluYW1vREJGdWxsQWNjZXNzJyksXHJcbiAgICAvLyAgICAgICAgIE1hbmFnZWRQb2xpY3kuZnJvbUF3c01hbmFnZWRQb2xpY3lOYW1lKCdzZXJ2aWNlLXJvbGUvQVdTTGFtYmRhQmFzaWNFeGVjdXRpb25Sb2xlJyksXHJcbiAgICAvLyAgICAgICAgIE1hbmFnZWRQb2xpY3kuZnJvbUF3c01hbmFnZWRQb2xpY3lOYW1lKFwiQVdTQ29kZVBpcGVsaW5lX0Z1bGxBY2Nlc3NcIiksXHJcbiAgICAvLyAgICAgICAgIE1hbmFnZWRQb2xpY3kuZnJvbUF3c01hbmFnZWRQb2xpY3lOYW1lKFwiQW1hem9uUzNGdWxsQWNjZXNzXCIpLFxyXG4gICAgLy8gICAgICAgICBNYW5hZ2VkUG9saWN5LmZyb21Bd3NNYW5hZ2VkUG9saWN5TmFtZShcIkF3c0Nsb3VkRm9ybWF0aW9uRnVsbEFjY2Vzc1wiKSxcclxuICAgIC8vICAgICAgIF0sXHJcbiAgICAvLyAgICAgfSk7XHJcbiAgICAvLyAgICAgcmV0dXJuIHJvbGVcclxuICAgIC8vICAgfVxyXG4gICAgfVxyXG4iXX0=