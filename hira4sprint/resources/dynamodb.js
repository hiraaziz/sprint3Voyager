"use strict";
// Load the AWS SDK for Node.js
var AWS = require('aws-sdk');
// Set the region 
AWS.config.update({ region: 'us-west-1' });
// Create the DynamoDB service object
const { env } = require('process');
const constant = require("./constant.json");
exports.dynamohandler = async function (event, context) {
    console.log(event);
    //Converting json into python
    console.log("message" + event['Records'][0]['Sns']['Message']);
    var messages = event['Records'][0]['Sns']['Message'];
    var ids = event['Records'][0]['Sns']['MessageId'];
    var response = JSON.parse(messages);
    console.log("response" + response);
    var metric_name = response['Trigger']['MetricName'];
    var Threshold = response['NewStateReason'];
    var dimension = response['Trigger']['Dimensions'][0]['value'];
    var time_stamp = event['Records'][0]['Sns']['Timestamp'];
    const unique = constant.partition_key;
    var params = {
        TableName: env.table_name,
        Item: {
            'hira_URL': { S: ids },
            'MetricName': { S: metric_name },
            'NewStateReason': { S: Threshold },
            'value': { S: dimension }
        }
    };
    var ddb = new AWS.DynamoDB();
    // Putting Values in dable
    return ddb.putItem(params, function (err, data) {
        if (err) {
            console.log("Error", err);
        }
        else {
            console.log("Success", data);
        }
    });
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHluYW1vZGIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJkeW5hbW9kYi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsK0JBQStCO0FBQy9CLElBQUksR0FBRyxHQUFHLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUM3QixrQkFBa0I7QUFDbEIsR0FBRyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBQyxNQUFNLEVBQUUsV0FBVyxFQUFDLENBQUMsQ0FBQztBQUV6QyxxQ0FBcUM7QUFFckMsTUFBTSxFQUFFLEdBQUcsRUFBRSxHQUFHLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUNuQyxNQUFNLFFBQVEsR0FBRyxPQUFPLENBQUMsaUJBQWlCLENBQUMsQ0FBQztBQUM1QyxPQUFPLENBQUMsYUFBYSxHQUFHLEtBQUssV0FBVSxLQUFTLEVBQUMsT0FBVztJQUV4RCxPQUFPLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFBO0lBQ2xCLDZCQUE2QjtJQUM3QixPQUFPLENBQUMsR0FBRyxDQUFDLFNBQVMsR0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQTtJQUM1RCxJQUFJLFFBQVEsR0FBRyxLQUFLLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUE7SUFDcEQsSUFBSSxHQUFHLEdBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFBO0lBQy9DLElBQUksUUFBUSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUE7SUFDbkMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxVQUFVLEdBQUMsUUFBUSxDQUFDLENBQUE7SUFDaEMsSUFBSSxXQUFXLEdBQUcsUUFBUSxDQUFDLFNBQVMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxDQUFBO0lBQ25ELElBQUksU0FBUyxHQUFHLFFBQVEsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFBO0lBQzFDLElBQUksU0FBUyxHQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQTtJQUMzRCxJQUFJLFVBQVUsR0FBRyxLQUFLLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsV0FBVyxDQUFDLENBQUE7SUFFeEQsTUFBTSxNQUFNLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQTtJQUVyQyxJQUFJLE1BQU0sR0FBRztRQUNULFNBQVMsRUFBRSxHQUFHLENBQUMsVUFBVTtRQUN6QixJQUFJLEVBQUU7WUFDSCxVQUFVLEVBQUcsRUFBQyxDQUFDLEVBQUUsR0FBRyxFQUFDO1lBQ3RCLFlBQVksRUFBRSxFQUFDLENBQUMsRUFBRyxXQUFXLEVBQUM7WUFDL0IsZ0JBQWdCLEVBQUcsRUFBQyxDQUFDLEVBQUcsU0FBUyxFQUFDO1lBQ2xDLE9BQU8sRUFBRyxFQUFDLENBQUMsRUFBRyxTQUFTLEVBQUM7U0FDMUI7S0FDRixDQUFBO0lBQ0QsSUFBSSxHQUFHLEdBQUcsSUFBSSxHQUFHLENBQUMsUUFBUSxFQUFFLENBQUM7SUFFN0IsMEJBQTBCO0lBQzFCLE9BQU8sR0FBRyxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUUsVUFBUyxHQUFPLEVBQUUsSUFBUTtRQUNuRCxJQUFJLEdBQUcsRUFBRTtZQUNQLE9BQU8sQ0FBQyxHQUFHLENBQUMsT0FBTyxFQUFFLEdBQUcsQ0FBQyxDQUFDO1NBQzNCO2FBQU07WUFDTCxPQUFPLENBQUMsR0FBRyxDQUFDLFNBQVMsRUFBRSxJQUFJLENBQUMsQ0FBQztTQUM5QjtJQUNILENBQUMsQ0FBQyxDQUFBO0FBRVIsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiLy8gTG9hZCB0aGUgQVdTIFNESyBmb3IgTm9kZS5qc1xyXG52YXIgQVdTID0gcmVxdWlyZSgnYXdzLXNkaycpO1xyXG4vLyBTZXQgdGhlIHJlZ2lvbiBcclxuQVdTLmNvbmZpZy51cGRhdGUoe3JlZ2lvbjogJ3VzLXdlc3QtMSd9KTtcclxuXHJcbi8vIENyZWF0ZSB0aGUgRHluYW1vREIgc2VydmljZSBvYmplY3RcclxuXHJcbmNvbnN0IHsgZW52IH0gPSByZXF1aXJlKCdwcm9jZXNzJyk7XHJcbmNvbnN0IGNvbnN0YW50ID0gcmVxdWlyZShcIi4vY29uc3RhbnQuanNvblwiKTtcclxuZXhwb3J0cy5keW5hbW9oYW5kbGVyID0gYXN5bmMgZnVuY3Rpb24oZXZlbnQ6YW55LGNvbnRleHQ6YW55KSB7XHJcblxyXG4gICAgY29uc29sZS5sb2coZXZlbnQpXHJcbiAgICAvL0NvbnZlcnRpbmcganNvbiBpbnRvIHB5dGhvblxyXG4gICAgY29uc29sZS5sb2coXCJtZXNzYWdlXCIrZXZlbnRbJ1JlY29yZHMnXVswXVsnU25zJ11bJ01lc3NhZ2UnXSlcclxuICAgIHZhciBtZXNzYWdlcyA9IGV2ZW50WydSZWNvcmRzJ11bMF1bJ1NucyddWydNZXNzYWdlJ11cclxuICAgIHZhciBpZHM9ZXZlbnRbJ1JlY29yZHMnXVswXVsnU25zJ11bJ01lc3NhZ2VJZCddXHJcbiAgICB2YXIgcmVzcG9uc2UgPSBKU09OLnBhcnNlKG1lc3NhZ2VzKVxyXG4gICAgY29uc29sZS5sb2coXCJyZXNwb25zZVwiK3Jlc3BvbnNlKVxyXG4gICAgdmFyIG1ldHJpY19uYW1lID0gcmVzcG9uc2VbJ1RyaWdnZXInXVsnTWV0cmljTmFtZSddXHJcbiAgICB2YXIgVGhyZXNob2xkID0gcmVzcG9uc2VbJ05ld1N0YXRlUmVhc29uJ11cclxuICAgIHZhciBkaW1lbnNpb249cmVzcG9uc2VbJ1RyaWdnZXInXVsnRGltZW5zaW9ucyddWzBdWyd2YWx1ZSddXHJcbiAgICB2YXIgdGltZV9zdGFtcCA9IGV2ZW50WydSZWNvcmRzJ11bMF1bJ1NucyddWydUaW1lc3RhbXAnXVxyXG4gICAgXHJcbiAgICBjb25zdCB1bmlxdWUgPSBjb25zdGFudC5wYXJ0aXRpb25fa2V5XHJcblxyXG4gICAgdmFyIHBhcmFtcyA9IHtcclxuICAgICAgICBUYWJsZU5hbWU6IGVudi50YWJsZV9uYW1lLFxyXG4gICAgICAgIEl0ZW06IHtcclxuICAgICAgICAgICAnaGlyYV9VUkwnIDoge1M6IGlkc30sXHJcbiAgICAgICAgICAnTWV0cmljTmFtZSc6IHtTIDogbWV0cmljX25hbWV9LFxyXG4gICAgICAgICAgJ05ld1N0YXRlUmVhc29uJyA6IHtTIDogVGhyZXNob2xkfSxcclxuICAgICAgICAgICd2YWx1ZScgOiB7UyA6IGRpbWVuc2lvbn1cclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgdmFyIGRkYiA9IG5ldyBBV1MuRHluYW1vREIoKTtcclxuXHJcbiAgICAgIC8vIFB1dHRpbmcgVmFsdWVzIGluIGRhYmxlXHJcbiAgICAgIHJldHVybiBkZGIucHV0SXRlbShwYXJhbXMsIGZ1bmN0aW9uKGVycjphbnksIGRhdGE6YW55KSB7XHJcbiAgICAgICAgaWYgKGVycikge1xyXG4gICAgICAgICAgY29uc29sZS5sb2coXCJFcnJvclwiLCBlcnIpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBjb25zb2xlLmxvZyhcIlN1Y2Nlc3NcIiwgZGF0YSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KVxyXG4gICAgICBcclxufVxyXG5cclxuXHJcbiJdfQ==