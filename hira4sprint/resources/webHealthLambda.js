"use strict";
const axios = require('axios');
const https = require('https');
const constant = require("./constant.json");
// import {publish_metric} from './cloudwatch';
exports.webhandler = async function (event, context) {
    let values;
    for (var urls of constant.url) {
        var avail = await get_availability(urls);
        var latency = await get_latency(urls);
        //publishing metric
        //    let cw_avail=publish_metric(constant.url_namespace,constant.Metricname_avail,urls,avail)
        //    let cw_latency=publish_metric(constant.url_namespace,constant.Metricname_latency,urls,latency)
        values = {
            "url": urls,
            "availability": avail,
            "latency": latency
        };
        console.log(values);
    }
    return values;
};
async function get_availability(url) {
    const res = await axios.get(url);
    if (res.status == 200 || res.status == 201) {
        return 1;
    }
    else {
        return 0;
    }
}
async function get_latency(url) {
    const strt_time = new Date().getTime();
    const res = await axios.get(url);
    const end_time = new Date().getTime();
    const diff = end_time - strt_time;
    const latency = diff / 1000;
    console.log(latency);
    return latency;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2ViSGVhbHRoTGFtYmRhLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsid2ViSGVhbHRoTGFtYmRhLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxNQUFNLEtBQUssR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDL0IsTUFBTSxLQUFLLEdBQUcsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQy9CLE1BQU0sUUFBUSxHQUFHLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO0FBRTVDLCtDQUErQztBQUMvQyxPQUFPLENBQUMsVUFBVSxHQUFHLEtBQUssV0FBVSxLQUFTLEVBQUMsT0FBVztJQUNyRCxJQUFJLE1BQVUsQ0FBQztJQUVYLEtBQUksSUFBSSxJQUFJLElBQUksUUFBUSxDQUFDLEdBQUcsRUFBRTtRQUUzQixJQUFJLEtBQUssR0FBRyxNQUFNLGdCQUFnQixDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3pDLElBQUksT0FBTyxHQUFHLE1BQU0sV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBRXRDLG1CQUFtQjtRQUN0Qiw4RkFBOEY7UUFDOUYsb0dBQW9HO1FBQzVGLE1BQU0sR0FBQztZQUNQLEtBQUssRUFBQyxJQUFJO1lBQ1YsY0FBYyxFQUFDLEtBQUs7WUFDcEIsU0FBUyxFQUFDLE9BQU87U0FBQyxDQUFDO1FBRTNCLE9BQU8sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUM7S0FDakI7SUFFRCxPQUFPLE1BQU0sQ0FBQTtBQUNyQixDQUFDLENBQUM7QUFFRixLQUFLLFVBQVUsZ0JBQWdCLENBQUMsR0FBVTtJQUV4QyxNQUFNLEdBQUcsR0FBRyxNQUFNLEtBQUssQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDakMsSUFBSSxHQUFHLENBQUMsTUFBTSxJQUFFLEdBQUcsSUFBSSxHQUFHLENBQUMsTUFBTSxJQUFFLEdBQUcsRUFBQztRQUNuQyxPQUFPLENBQUMsQ0FBQTtLQUNYO1NBQ0c7UUFDQSxPQUFPLENBQUMsQ0FBQTtLQUNYO0FBQ0wsQ0FBQztBQUVELEtBQUssVUFBVSxXQUFXLENBQUMsR0FBVTtJQUNqQyxNQUFNLFNBQVMsR0FBQyxJQUFJLElBQUksRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDO0lBQ3JDLE1BQU0sR0FBRyxHQUFHLE1BQU0sS0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNqQyxNQUFNLFFBQVEsR0FBQyxJQUFJLElBQUksRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDO0lBQ3BDLE1BQU0sSUFBSSxHQUFHLFFBQVEsR0FBQyxTQUFTLENBQUE7SUFDL0IsTUFBTSxPQUFPLEdBQUcsSUFBSSxHQUFHLElBQUksQ0FBQztJQUM1QixPQUFPLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFBO0lBQ3BCLE9BQU8sT0FBTyxDQUFBO0FBQ2xCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBheGlvcyA9IHJlcXVpcmUoJ2F4aW9zJyk7XHJcbmNvbnN0IGh0dHBzID0gcmVxdWlyZSgnaHR0cHMnKTtcclxuY29uc3QgY29uc3RhbnQgPSByZXF1aXJlKFwiLi9jb25zdGFudC5qc29uXCIpO1xyXG5cclxuLy8gaW1wb3J0IHtwdWJsaXNoX21ldHJpY30gZnJvbSAnLi9jbG91ZHdhdGNoJztcclxuZXhwb3J0cy53ZWJoYW5kbGVyID0gYXN5bmMgZnVuY3Rpb24oZXZlbnQ6YW55LGNvbnRleHQ6YW55KSB7XHJcbiAgICBsZXQgdmFsdWVzOmFueTtcclxuICAgIFxyXG4gICAgICAgIGZvcih2YXIgdXJscyBvZiBjb25zdGFudC51cmwpIHtcclxuICAgICAgICAgIFxyXG4gICAgICAgICAgIHZhciBhdmFpbCA9IGF3YWl0IGdldF9hdmFpbGFiaWxpdHkodXJscyk7XHJcbiAgICAgICAgICAgdmFyIGxhdGVuY3kgPSBhd2FpdCBnZXRfbGF0ZW5jeSh1cmxzKTtcclxuICAgICAgICAgICBcclxuICAgICAgICAgICAvL3B1Ymxpc2hpbmcgbWV0cmljXHJcbiAgICAgICAgLy8gICAgbGV0IGN3X2F2YWlsPXB1Ymxpc2hfbWV0cmljKGNvbnN0YW50LnVybF9uYW1lc3BhY2UsY29uc3RhbnQuTWV0cmljbmFtZV9hdmFpbCx1cmxzLGF2YWlsKVxyXG4gICAgICAgIC8vICAgIGxldCBjd19sYXRlbmN5PXB1Ymxpc2hfbWV0cmljKGNvbnN0YW50LnVybF9uYW1lc3BhY2UsY29uc3RhbnQuTWV0cmljbmFtZV9sYXRlbmN5LHVybHMsbGF0ZW5jeSlcclxuICAgICAgICAgICAgICAgIHZhbHVlcz17XHJcbiAgICAgICAgICAgICAgICBcInVybFwiOnVybHMsXHJcbiAgICAgICAgICAgICAgICBcImF2YWlsYWJpbGl0eVwiOmF2YWlsLFxyXG4gICAgICAgICAgICAgICAgXCJsYXRlbmN5XCI6bGF0ZW5jeX07XHJcbiAgICAgICAgICAgICAgIFxyXG4gICAgICAgIGNvbnNvbGUubG9nKHZhbHVlcyk7XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgcmV0dXJuIHZhbHVlc1xyXG4gIH07XHJcblxyXG4gIGFzeW5jIGZ1bmN0aW9uIGdldF9hdmFpbGFiaWxpdHkodXJsOnN0cmluZyl7XHJcblxyXG4gICAgY29uc3QgcmVzID0gYXdhaXQgYXhpb3MuZ2V0KHVybCk7XHJcbiAgICBpZiAocmVzLnN0YXR1cz09MjAwIHx8IHJlcy5zdGF0dXM9PTIwMSl7XHJcbiAgICAgICAgcmV0dXJuIDFcclxuICAgIH1cclxuICAgIGVsc2V7XHJcbiAgICAgICAgcmV0dXJuIDBcclxuICAgIH1cclxufVxyXG5cclxuYXN5bmMgZnVuY3Rpb24gZ2V0X2xhdGVuY3kodXJsOnN0cmluZyl7XHJcbiAgICBjb25zdCBzdHJ0X3RpbWU9bmV3IERhdGUoKS5nZXRUaW1lKCk7XHJcbiAgICBjb25zdCByZXMgPSBhd2FpdCBheGlvcy5nZXQodXJsKTtcclxuICAgIGNvbnN0IGVuZF90aW1lPW5ldyBEYXRlKCkuZ2V0VGltZSgpO1xyXG4gICAgY29uc3QgZGlmZiA9IGVuZF90aW1lLXN0cnRfdGltZVxyXG4gICAgY29uc3QgbGF0ZW5jeSA9IGRpZmYgLyAxMDAwO1xyXG4gICAgY29uc29sZS5sb2cobGF0ZW5jeSlcclxuICAgIHJldHVybiBsYXRlbmN5XHJcbn0iXX0=