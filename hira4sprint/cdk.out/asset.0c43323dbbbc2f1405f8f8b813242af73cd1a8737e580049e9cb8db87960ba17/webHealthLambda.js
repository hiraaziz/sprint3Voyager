"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const axios = require('axios');
const https = require('https');
const constant = require("./constant.json");
const cloudwatch_1 = require("./cloudwatch");
const { downloads3 } = require('./downloads3');
exports.webhandler = async function (event, context) {
    let values;
    // Download file from s3 bucket
    const s3Bucket = new downloads3();
    let constants = await s3Bucket.downloadfrom_s3t(env.bucket_name, "constant.json");
    // Iterate each URL
    for (var urls of constant.url) {
        var avail = await get_availability(urls);
        var latency = await get_latency(urls);
        //publishing metric of availability and latency
        let cw_avail = cloudwatch_1.publish_metric(constant.url_namespace, constant.Metricname_avail, urls, avail);
        let cw_latency = cloudwatch_1.publish_metric(constant.url_namespace, constant.Metricname_latency, urls, latency);
        values = {
            "url": urls,
            "availability": avail,
            "latency": latency
        };
        console.log(values);
    }
    return values;
};
// Get Availability
async function get_availability(url) {
    const res = await axios.get(url);
    if (res.status == 200 || res.status == 201) { // If status will return 200 & 201, website is available
        return 1;
    }
    else {
        return 0;
    }
}
// Get Latency
async function get_latency(url) {
    const strt_time = new Date().getTime();
    const res = await axios.get(url);
    const end_time = new Date().getTime();
    const diff = end_time - strt_time;
    const latency = diff / 1000; // Calculating difference between start & end time
    console.log(latency);
    return latency;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2ViSGVhbHRoTGFtYmRhLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsid2ViSGVhbHRoTGFtYmRhLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsTUFBTSxLQUFLLEdBQUcsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQy9CLE1BQU0sS0FBSyxHQUFHLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUMvQixNQUFNLFFBQVEsR0FBRyxPQUFPLENBQUMsaUJBQWlCLENBQUMsQ0FBQztBQUM1Qyw2Q0FBNEM7QUFDNUMsTUFBTSxFQUFDLFVBQVUsRUFBRSxHQUFHLE9BQU8sQ0FBQyxjQUFjLENBQUMsQ0FBQTtBQUU3QyxPQUFPLENBQUMsVUFBVSxHQUFHLEtBQUssV0FBVSxLQUFTLEVBQUMsT0FBVztJQUNyRCxJQUFJLE1BQVUsQ0FBQztJQUVYLCtCQUErQjtJQUMvQixNQUFNLFFBQVEsR0FBRyxJQUFJLFVBQVUsRUFBRSxDQUFBO0lBQ2pDLElBQUksU0FBUyxHQUFHLE1BQU0sUUFBUSxDQUFDLGdCQUFnQixDQUFDLEdBQUcsQ0FBQyxXQUFXLEVBQUUsZUFBZSxDQUFDLENBQUE7SUFFakYsbUJBQW1CO0lBQ25CLEtBQUksSUFBSSxJQUFJLElBQUksUUFBUSxDQUFDLEdBQUcsRUFBRTtRQUUzQixJQUFJLEtBQUssR0FBRyxNQUFNLGdCQUFnQixDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3pDLElBQUksT0FBTyxHQUFHLE1BQU0sV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBRXRDLCtDQUErQztRQUMvQyxJQUFJLFFBQVEsR0FBQywyQkFBYyxDQUFDLFFBQVEsQ0FBQyxhQUFhLEVBQUMsUUFBUSxDQUFDLGdCQUFnQixFQUFDLElBQUksRUFBQyxLQUFLLENBQUMsQ0FBQTtRQUN4RixJQUFJLFVBQVUsR0FBQywyQkFBYyxDQUFDLFFBQVEsQ0FBQyxhQUFhLEVBQUMsUUFBUSxDQUFDLGtCQUFrQixFQUFDLElBQUksRUFBQyxPQUFPLENBQUMsQ0FBQTtRQUV6RixNQUFNLEdBQUM7WUFDUCxLQUFLLEVBQUMsSUFBSTtZQUNWLGNBQWMsRUFBQyxLQUFLO1lBQ3BCLFNBQVMsRUFBQyxPQUFPO1NBQUMsQ0FBQztRQUUzQixPQUFPLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0tBQ2pCO0lBRUQsT0FBTyxNQUFNLENBQUE7QUFDckIsQ0FBQyxDQUFDO0FBRUosbUJBQW1CO0FBQ25CLEtBQUssVUFBVSxnQkFBZ0IsQ0FBQyxHQUFVO0lBRXRDLE1BQU0sR0FBRyxHQUFHLE1BQU0sS0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNqQyxJQUFJLEdBQUcsQ0FBQyxNQUFNLElBQUUsR0FBRyxJQUFJLEdBQUcsQ0FBQyxNQUFNLElBQUUsR0FBRyxFQUFDLEVBQUUsd0RBQXdEO1FBQzdGLE9BQU8sQ0FBQyxDQUFBO0tBQ1g7U0FDRztRQUNBLE9BQU8sQ0FBQyxDQUFBO0tBQ1g7QUFDTCxDQUFDO0FBRUQsY0FBYztBQUNkLEtBQUssVUFBVSxXQUFXLENBQUMsR0FBVTtJQUNqQyxNQUFNLFNBQVMsR0FBQyxJQUFJLElBQUksRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDO0lBQ3JDLE1BQU0sR0FBRyxHQUFHLE1BQU0sS0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNqQyxNQUFNLFFBQVEsR0FBQyxJQUFJLElBQUksRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDO0lBQ3BDLE1BQU0sSUFBSSxHQUFHLFFBQVEsR0FBQyxTQUFTLENBQUE7SUFDL0IsTUFBTSxPQUFPLEdBQUcsSUFBSSxHQUFHLElBQUksQ0FBQyxDQUFDLGtEQUFrRDtJQUMvRSxPQUFPLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFBO0lBQ3BCLE9BQU8sT0FBTyxDQUFBO0FBQ2xCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBheGlvcyA9IHJlcXVpcmUoJ2F4aW9zJyk7XHJcbmNvbnN0IGh0dHBzID0gcmVxdWlyZSgnaHR0cHMnKTtcclxuY29uc3QgY29uc3RhbnQgPSByZXF1aXJlKFwiLi9jb25zdGFudC5qc29uXCIpO1xyXG5pbXBvcnQge3B1Ymxpc2hfbWV0cmljfSBmcm9tICcuL2Nsb3Vkd2F0Y2gnO1xyXG5jb25zdCB7ZG93bmxvYWRzMyB9ID0gcmVxdWlyZSgnLi9kb3dubG9hZHMzJykgXHJcblxyXG5leHBvcnRzLndlYmhhbmRsZXIgPSBhc3luYyBmdW5jdGlvbihldmVudDphbnksY29udGV4dDphbnkpIHtcclxuICAgIGxldCB2YWx1ZXM6YW55O1xyXG5cclxuICAgICAgICAvLyBEb3dubG9hZCBmaWxlIGZyb20gczMgYnVja2V0XHJcbiAgICAgICAgY29uc3QgczNCdWNrZXQgPSBuZXcgZG93bmxvYWRzMygpXHJcbiAgICAgICAgbGV0IGNvbnN0YW50cyA9IGF3YWl0IHMzQnVja2V0LmRvd25sb2FkZnJvbV9zM3QoZW52LmJ1Y2tldF9uYW1lLCBcImNvbnN0YW50Lmpzb25cIilcclxuXHJcbiAgICAgICAgLy8gSXRlcmF0ZSBlYWNoIFVSTFxyXG4gICAgICAgIGZvcih2YXIgdXJscyBvZiBjb25zdGFudC51cmwpIHtcclxuICAgICAgICAgIFxyXG4gICAgICAgICAgIHZhciBhdmFpbCA9IGF3YWl0IGdldF9hdmFpbGFiaWxpdHkodXJscyk7XHJcbiAgICAgICAgICAgdmFyIGxhdGVuY3kgPSBhd2FpdCBnZXRfbGF0ZW5jeSh1cmxzKTtcclxuICAgICAgICAgICBcclxuICAgICAgICAgICAvL3B1Ymxpc2hpbmcgbWV0cmljIG9mIGF2YWlsYWJpbGl0eSBhbmQgbGF0ZW5jeVxyXG4gICAgICAgICAgIGxldCBjd19hdmFpbD1wdWJsaXNoX21ldHJpYyhjb25zdGFudC51cmxfbmFtZXNwYWNlLGNvbnN0YW50Lk1ldHJpY25hbWVfYXZhaWwsdXJscyxhdmFpbClcclxuICAgICAgICAgICBsZXQgY3dfbGF0ZW5jeT1wdWJsaXNoX21ldHJpYyhjb25zdGFudC51cmxfbmFtZXNwYWNlLGNvbnN0YW50Lk1ldHJpY25hbWVfbGF0ZW5jeSx1cmxzLGxhdGVuY3kpXHJcbiAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICB2YWx1ZXM9e1xyXG4gICAgICAgICAgICAgICAgXCJ1cmxcIjp1cmxzLFxyXG4gICAgICAgICAgICAgICAgXCJhdmFpbGFiaWxpdHlcIjphdmFpbCxcclxuICAgICAgICAgICAgICAgIFwibGF0ZW5jeVwiOmxhdGVuY3l9O1xyXG4gICAgICAgICAgICAgICBcclxuICAgICAgICBjb25zb2xlLmxvZyh2YWx1ZXMpO1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIHJldHVybiB2YWx1ZXNcclxuICB9O1xyXG5cclxuLy8gR2V0IEF2YWlsYWJpbGl0eVxyXG5hc3luYyBmdW5jdGlvbiBnZXRfYXZhaWxhYmlsaXR5KHVybDpzdHJpbmcpe1xyXG5cclxuICAgIGNvbnN0IHJlcyA9IGF3YWl0IGF4aW9zLmdldCh1cmwpO1xyXG4gICAgaWYgKHJlcy5zdGF0dXM9PTIwMCB8fCByZXMuc3RhdHVzPT0yMDEpeyAvLyBJZiBzdGF0dXMgd2lsbCByZXR1cm4gMjAwICYgMjAxLCB3ZWJzaXRlIGlzIGF2YWlsYWJsZVxyXG4gICAgICAgIHJldHVybiAxXHJcbiAgICB9XHJcbiAgICBlbHNle1xyXG4gICAgICAgIHJldHVybiAwXHJcbiAgICB9XHJcbn1cclxuXHJcbi8vIEdldCBMYXRlbmN5XHJcbmFzeW5jIGZ1bmN0aW9uIGdldF9sYXRlbmN5KHVybDpzdHJpbmcpe1xyXG4gICAgY29uc3Qgc3RydF90aW1lPW5ldyBEYXRlKCkuZ2V0VGltZSgpO1xyXG4gICAgY29uc3QgcmVzID0gYXdhaXQgYXhpb3MuZ2V0KHVybCk7XHJcbiAgICBjb25zdCBlbmRfdGltZT1uZXcgRGF0ZSgpLmdldFRpbWUoKTtcclxuICAgIGNvbnN0IGRpZmYgPSBlbmRfdGltZS1zdHJ0X3RpbWVcclxuICAgIGNvbnN0IGxhdGVuY3kgPSBkaWZmIC8gMTAwMDsgLy8gQ2FsY3VsYXRpbmcgZGlmZmVyZW5jZSBiZXR3ZWVuIHN0YXJ0ICYgZW5kIHRpbWVcclxuICAgIGNvbnNvbGUubG9nKGxhdGVuY3kpXHJcbiAgICByZXR1cm4gbGF0ZW5jeVxyXG59Il19