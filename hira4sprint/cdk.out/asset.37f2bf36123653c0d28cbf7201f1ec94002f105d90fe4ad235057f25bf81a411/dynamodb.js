"use strict";
// Load the AWS SDK for Node.js
var AWS = require('aws-sdk');
// Set the region 
AWS.config.update({ region: 'us-west-1' });
// Create the DynamoDB service object
const { env } = require('process');
const constant = require("./constant.json");
exports.dynamohandler = async function (event, context) {
    console.log(event);
    console.log("message" + event['Records'][0]['Sns']['Message']);
    var messages = event['Records'][0]['Sns']['Message'];
    var ids = event['Records'][0]['Sns']['MessageId'];
    var response = JSON.parse(messages);
    console.log("response" + response);
    var metric_name = response['Trigger']['MetricName'];
    var Threshold = response['NewStateReason'];
    var dimension = response['Trigger']['Dimensions'][0]['value'];
    var time_stamp = event['Records'][0]['Sns']['Timestamp'];
    const unique = constant.partition_key;
    var params = {
        TableName: env.table_name,
        Item: {
            unique: { S: ids },
            'MetricName': { S: metric_name },
            'NewStateReason': { S: Threshold },
            'value': { S: dimension }
        }
    };
    var ddb = new AWS.DynamoDB();
    return ddb.putItem(params, function (err, data) {
        if (err) {
            console.log("Error", err);
        }
        else {
            console.log("Success", data);
        }
    });
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHluYW1vZGIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJkeW5hbW9kYi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsK0JBQStCO0FBQy9CLElBQUksR0FBRyxHQUFHLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUM3QixrQkFBa0I7QUFDbEIsR0FBRyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBQyxNQUFNLEVBQUUsV0FBVyxFQUFDLENBQUMsQ0FBQztBQUV6QyxxQ0FBcUM7QUFFckMsTUFBTSxFQUFFLEdBQUcsRUFBRSxHQUFHLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUNuQyxNQUFNLFFBQVEsR0FBRyxPQUFPLENBQUMsaUJBQWlCLENBQUMsQ0FBQztBQUM1QyxPQUFPLENBQUMsYUFBYSxHQUFHLEtBQUssV0FBVSxLQUFTLEVBQUMsT0FBVztJQUV4RCxPQUFPLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFBO0lBQ2xCLE9BQU8sQ0FBQyxHQUFHLENBQUMsU0FBUyxHQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFBO0lBQzVELElBQUksUUFBUSxHQUFHLEtBQUssQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQTtJQUNwRCxJQUFJLEdBQUcsR0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsV0FBVyxDQUFDLENBQUE7SUFDL0MsSUFBSSxRQUFRLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQTtJQUNuQyxPQUFPLENBQUMsR0FBRyxDQUFDLFVBQVUsR0FBQyxRQUFRLENBQUMsQ0FBQTtJQUNoQyxJQUFJLFdBQVcsR0FBRyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUMsWUFBWSxDQUFDLENBQUE7SUFDbkQsSUFBSSxTQUFTLEdBQUcsUUFBUSxDQUFDLGdCQUFnQixDQUFDLENBQUE7SUFDMUMsSUFBSSxTQUFTLEdBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFBO0lBQzNELElBQUksVUFBVSxHQUFHLEtBQUssQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQTtJQUV4RCxNQUFNLE1BQU0sR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFBO0lBRXJDLElBQUksTUFBTSxHQUFHO1FBQ1QsU0FBUyxFQUFFLEdBQUcsQ0FBQyxVQUFVO1FBQ3pCLElBQUksRUFBRTtZQUNILE1BQU0sRUFBRyxFQUFDLENBQUMsRUFBRSxHQUFHLEVBQUM7WUFDbEIsWUFBWSxFQUFFLEVBQUMsQ0FBQyxFQUFHLFdBQVcsRUFBQztZQUMvQixnQkFBZ0IsRUFBRyxFQUFDLENBQUMsRUFBRyxTQUFTLEVBQUM7WUFDbEMsT0FBTyxFQUFHLEVBQUMsQ0FBQyxFQUFHLFNBQVMsRUFBQztTQUMxQjtLQUNGLENBQUE7SUFDRCxJQUFJLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUM3QixPQUFPLEdBQUcsQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLFVBQVMsR0FBTyxFQUFFLElBQVE7UUFDbkQsSUFBSSxHQUFHLEVBQUU7WUFDUCxPQUFPLENBQUMsR0FBRyxDQUFDLE9BQU8sRUFBRSxHQUFHLENBQUMsQ0FBQztTQUMzQjthQUFNO1lBQ0wsT0FBTyxDQUFDLEdBQUcsQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLENBQUM7U0FDOUI7SUFDSCxDQUFDLENBQUMsQ0FBQTtBQUVSLENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbIi8vIExvYWQgdGhlIEFXUyBTREsgZm9yIE5vZGUuanNcclxudmFyIEFXUyA9IHJlcXVpcmUoJ2F3cy1zZGsnKTtcclxuLy8gU2V0IHRoZSByZWdpb24gXHJcbkFXUy5jb25maWcudXBkYXRlKHtyZWdpb246ICd1cy13ZXN0LTEnfSk7XHJcblxyXG4vLyBDcmVhdGUgdGhlIER5bmFtb0RCIHNlcnZpY2Ugb2JqZWN0XHJcblxyXG5jb25zdCB7IGVudiB9ID0gcmVxdWlyZSgncHJvY2VzcycpO1xyXG5jb25zdCBjb25zdGFudCA9IHJlcXVpcmUoXCIuL2NvbnN0YW50Lmpzb25cIik7XHJcbmV4cG9ydHMuZHluYW1vaGFuZGxlciA9IGFzeW5jIGZ1bmN0aW9uKGV2ZW50OmFueSxjb250ZXh0OmFueSkge1xyXG5cclxuICAgIGNvbnNvbGUubG9nKGV2ZW50KVxyXG4gICAgY29uc29sZS5sb2coXCJtZXNzYWdlXCIrZXZlbnRbJ1JlY29yZHMnXVswXVsnU25zJ11bJ01lc3NhZ2UnXSlcclxuICAgIHZhciBtZXNzYWdlcyA9IGV2ZW50WydSZWNvcmRzJ11bMF1bJ1NucyddWydNZXNzYWdlJ11cclxuICAgIHZhciBpZHM9ZXZlbnRbJ1JlY29yZHMnXVswXVsnU25zJ11bJ01lc3NhZ2VJZCddXHJcbiAgICB2YXIgcmVzcG9uc2UgPSBKU09OLnBhcnNlKG1lc3NhZ2VzKVxyXG4gICAgY29uc29sZS5sb2coXCJyZXNwb25zZVwiK3Jlc3BvbnNlKVxyXG4gICAgdmFyIG1ldHJpY19uYW1lID0gcmVzcG9uc2VbJ1RyaWdnZXInXVsnTWV0cmljTmFtZSddXHJcbiAgICB2YXIgVGhyZXNob2xkID0gcmVzcG9uc2VbJ05ld1N0YXRlUmVhc29uJ11cclxuICAgIHZhciBkaW1lbnNpb249cmVzcG9uc2VbJ1RyaWdnZXInXVsnRGltZW5zaW9ucyddWzBdWyd2YWx1ZSddXHJcbiAgICB2YXIgdGltZV9zdGFtcCA9IGV2ZW50WydSZWNvcmRzJ11bMF1bJ1NucyddWydUaW1lc3RhbXAnXVxyXG4gICAgXHJcbiAgICBjb25zdCB1bmlxdWUgPSBjb25zdGFudC5wYXJ0aXRpb25fa2V5XHJcblxyXG4gICAgdmFyIHBhcmFtcyA9IHtcclxuICAgICAgICBUYWJsZU5hbWU6IGVudi50YWJsZV9uYW1lLFxyXG4gICAgICAgIEl0ZW06IHtcclxuICAgICAgICAgICB1bmlxdWUgOiB7UzogaWRzfSxcclxuICAgICAgICAgICdNZXRyaWNOYW1lJzoge1MgOiBtZXRyaWNfbmFtZX0sXHJcbiAgICAgICAgICAnTmV3U3RhdGVSZWFzb24nIDoge1MgOiBUaHJlc2hvbGR9LFxyXG4gICAgICAgICAgJ3ZhbHVlJyA6IHtTIDogZGltZW5zaW9ufVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICB2YXIgZGRiID0gbmV3IEFXUy5EeW5hbW9EQigpO1xyXG4gICAgICByZXR1cm4gZGRiLnB1dEl0ZW0ocGFyYW1zLCBmdW5jdGlvbihlcnI6YW55LCBkYXRhOmFueSkge1xyXG4gICAgICAgIGlmIChlcnIpIHtcclxuICAgICAgICAgIGNvbnNvbGUubG9nKFwiRXJyb3JcIiwgZXJyKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgY29uc29sZS5sb2coXCJTdWNjZXNzXCIsIGRhdGEpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSlcclxuICAgICAgXHJcbn1cclxuXHJcblxyXG4iXX0=