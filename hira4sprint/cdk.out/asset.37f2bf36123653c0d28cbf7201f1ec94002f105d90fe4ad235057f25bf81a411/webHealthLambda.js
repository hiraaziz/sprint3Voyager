"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const axios = require('axios');
const https = require('https');
const constant = require("./constant.json");
const cloudwatch_1 = require("./cloudwatch");
exports.webhandler = async function (event, context) {
    let values;
    // Iterate each URL
    for (var urls of constant.url) {
        var avail = await get_availability(urls);
        var latency = await get_latency(urls);
        //publishing metric of availability and latency
        let cw_avail = cloudwatch_1.publish_metric(constant.url_namespace, constant.Metricname_avail, urls, avail);
        let cw_latency = cloudwatch_1.publish_metric(constant.url_namespace, constant.Metricname_latency, urls, latency);
        values = {
            "url": urls,
            "availability": avail,
            "latency": latency
        };
        console.log(values);
    }
    return values;
};
// Get Availability
async function get_availability(url) {
    const res = await axios.get(url);
    if (res.status == 200 || res.status == 201) { // If status will return 200 & 201, website is available
        return 1;
    }
    else {
        return 0;
    }
}
// Get Latency
async function get_latency(url) {
    const strt_time = new Date().getTime();
    const res = await axios.get(url);
    const end_time = new Date().getTime();
    const diff = end_time - strt_time;
    const latency = diff / 1000; // Calculating difference between start & end time
    console.log(latency);
    return latency;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2ViSGVhbHRoTGFtYmRhLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsid2ViSGVhbHRoTGFtYmRhLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsTUFBTSxLQUFLLEdBQUcsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQy9CLE1BQU0sS0FBSyxHQUFHLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUMvQixNQUFNLFFBQVEsR0FBRyxPQUFPLENBQUMsaUJBQWlCLENBQUMsQ0FBQztBQUM1Qyw2Q0FBNEM7QUFFNUMsT0FBTyxDQUFDLFVBQVUsR0FBRyxLQUFLLFdBQVUsS0FBUyxFQUFDLE9BQVc7SUFDckQsSUFBSSxNQUFVLENBQUM7SUFFWCxtQkFBbUI7SUFDbkIsS0FBSSxJQUFJLElBQUksSUFBSSxRQUFRLENBQUMsR0FBRyxFQUFFO1FBRTNCLElBQUksS0FBSyxHQUFHLE1BQU0sZ0JBQWdCLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDekMsSUFBSSxPQUFPLEdBQUcsTUFBTSxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUM7UUFFdEMsK0NBQStDO1FBQy9DLElBQUksUUFBUSxHQUFDLDJCQUFjLENBQUMsUUFBUSxDQUFDLGFBQWEsRUFBQyxRQUFRLENBQUMsZ0JBQWdCLEVBQUMsSUFBSSxFQUFDLEtBQUssQ0FBQyxDQUFBO1FBQ3hGLElBQUksVUFBVSxHQUFDLDJCQUFjLENBQUMsUUFBUSxDQUFDLGFBQWEsRUFBQyxRQUFRLENBQUMsa0JBQWtCLEVBQUMsSUFBSSxFQUFDLE9BQU8sQ0FBQyxDQUFBO1FBRXpGLE1BQU0sR0FBQztZQUNQLEtBQUssRUFBQyxJQUFJO1lBQ1YsY0FBYyxFQUFDLEtBQUs7WUFDcEIsU0FBUyxFQUFDLE9BQU87U0FBQyxDQUFDO1FBRTNCLE9BQU8sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUM7S0FDakI7SUFFRCxPQUFPLE1BQU0sQ0FBQTtBQUNyQixDQUFDLENBQUM7QUFFSixtQkFBbUI7QUFDbkIsS0FBSyxVQUFVLGdCQUFnQixDQUFDLEdBQVU7SUFFdEMsTUFBTSxHQUFHLEdBQUcsTUFBTSxLQUFLLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ2pDLElBQUksR0FBRyxDQUFDLE1BQU0sSUFBRSxHQUFHLElBQUksR0FBRyxDQUFDLE1BQU0sSUFBRSxHQUFHLEVBQUMsRUFBRSx3REFBd0Q7UUFDN0YsT0FBTyxDQUFDLENBQUE7S0FDWDtTQUNHO1FBQ0EsT0FBTyxDQUFDLENBQUE7S0FDWDtBQUNMLENBQUM7QUFFRCxjQUFjO0FBQ2QsS0FBSyxVQUFVLFdBQVcsQ0FBQyxHQUFVO0lBQ2pDLE1BQU0sU0FBUyxHQUFDLElBQUksSUFBSSxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUM7SUFDckMsTUFBTSxHQUFHLEdBQUcsTUFBTSxLQUFLLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ2pDLE1BQU0sUUFBUSxHQUFDLElBQUksSUFBSSxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUM7SUFDcEMsTUFBTSxJQUFJLEdBQUcsUUFBUSxHQUFDLFNBQVMsQ0FBQTtJQUMvQixNQUFNLE9BQU8sR0FBRyxJQUFJLEdBQUcsSUFBSSxDQUFDLENBQUMsa0RBQWtEO0lBQy9FLE9BQU8sQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUE7SUFDcEIsT0FBTyxPQUFPLENBQUE7QUFDbEIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IGF4aW9zID0gcmVxdWlyZSgnYXhpb3MnKTtcclxuY29uc3QgaHR0cHMgPSByZXF1aXJlKCdodHRwcycpO1xyXG5jb25zdCBjb25zdGFudCA9IHJlcXVpcmUoXCIuL2NvbnN0YW50Lmpzb25cIik7XHJcbmltcG9ydCB7cHVibGlzaF9tZXRyaWN9IGZyb20gJy4vY2xvdWR3YXRjaCc7XHJcblxyXG5leHBvcnRzLndlYmhhbmRsZXIgPSBhc3luYyBmdW5jdGlvbihldmVudDphbnksY29udGV4dDphbnkpIHtcclxuICAgIGxldCB2YWx1ZXM6YW55O1xyXG4gICAgXHJcbiAgICAgICAgLy8gSXRlcmF0ZSBlYWNoIFVSTFxyXG4gICAgICAgIGZvcih2YXIgdXJscyBvZiBjb25zdGFudC51cmwpIHtcclxuICAgICAgICAgIFxyXG4gICAgICAgICAgIHZhciBhdmFpbCA9IGF3YWl0IGdldF9hdmFpbGFiaWxpdHkodXJscyk7XHJcbiAgICAgICAgICAgdmFyIGxhdGVuY3kgPSBhd2FpdCBnZXRfbGF0ZW5jeSh1cmxzKTtcclxuICAgICAgICAgICBcclxuICAgICAgICAgICAvL3B1Ymxpc2hpbmcgbWV0cmljIG9mIGF2YWlsYWJpbGl0eSBhbmQgbGF0ZW5jeVxyXG4gICAgICAgICAgIGxldCBjd19hdmFpbD1wdWJsaXNoX21ldHJpYyhjb25zdGFudC51cmxfbmFtZXNwYWNlLGNvbnN0YW50Lk1ldHJpY25hbWVfYXZhaWwsdXJscyxhdmFpbClcclxuICAgICAgICAgICBsZXQgY3dfbGF0ZW5jeT1wdWJsaXNoX21ldHJpYyhjb25zdGFudC51cmxfbmFtZXNwYWNlLGNvbnN0YW50Lk1ldHJpY25hbWVfbGF0ZW5jeSx1cmxzLGxhdGVuY3kpXHJcbiAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICB2YWx1ZXM9e1xyXG4gICAgICAgICAgICAgICAgXCJ1cmxcIjp1cmxzLFxyXG4gICAgICAgICAgICAgICAgXCJhdmFpbGFiaWxpdHlcIjphdmFpbCxcclxuICAgICAgICAgICAgICAgIFwibGF0ZW5jeVwiOmxhdGVuY3l9O1xyXG4gICAgICAgICAgICAgICBcclxuICAgICAgICBjb25zb2xlLmxvZyh2YWx1ZXMpO1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIHJldHVybiB2YWx1ZXNcclxuICB9O1xyXG5cclxuLy8gR2V0IEF2YWlsYWJpbGl0eVxyXG5hc3luYyBmdW5jdGlvbiBnZXRfYXZhaWxhYmlsaXR5KHVybDpzdHJpbmcpe1xyXG5cclxuICAgIGNvbnN0IHJlcyA9IGF3YWl0IGF4aW9zLmdldCh1cmwpO1xyXG4gICAgaWYgKHJlcy5zdGF0dXM9PTIwMCB8fCByZXMuc3RhdHVzPT0yMDEpeyAvLyBJZiBzdGF0dXMgd2lsbCByZXR1cm4gMjAwICYgMjAxLCB3ZWJzaXRlIGlzIGF2YWlsYWJsZVxyXG4gICAgICAgIHJldHVybiAxXHJcbiAgICB9XHJcbiAgICBlbHNle1xyXG4gICAgICAgIHJldHVybiAwXHJcbiAgICB9XHJcbn1cclxuXHJcbi8vIEdldCBMYXRlbmN5XHJcbmFzeW5jIGZ1bmN0aW9uIGdldF9sYXRlbmN5KHVybDpzdHJpbmcpe1xyXG4gICAgY29uc3Qgc3RydF90aW1lPW5ldyBEYXRlKCkuZ2V0VGltZSgpO1xyXG4gICAgY29uc3QgcmVzID0gYXdhaXQgYXhpb3MuZ2V0KHVybCk7XHJcbiAgICBjb25zdCBlbmRfdGltZT1uZXcgRGF0ZSgpLmdldFRpbWUoKTtcclxuICAgIGNvbnN0IGRpZmYgPSBlbmRfdGltZS1zdHJ0X3RpbWVcclxuICAgIGNvbnN0IGxhdGVuY3kgPSBkaWZmIC8gMTAwMDsgLy8gQ2FsY3VsYXRpbmcgZGlmZmVyZW5jZSBiZXR3ZWVuIHN0YXJ0ICYgZW5kIHRpbWVcclxuICAgIGNvbnNvbGUubG9nKGxhdGVuY3kpXHJcbiAgICByZXR1cm4gbGF0ZW5jeVxyXG59Il19